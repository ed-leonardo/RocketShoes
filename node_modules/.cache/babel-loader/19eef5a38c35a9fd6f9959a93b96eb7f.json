{"ast":null,"code":"import _defineProperty from \"/home/atomic/Bootcamp/MODULO007/rocketshoes/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { call, put, all, takeLatest, select } from 'redux-saga/effects';\nimport api from '../../../services/api';\nimport { toast } from 'react-toastify';\nimport { addToCartSuccess, updateAmountSuccess } from './actions';\nimport { formatPrice } from '../../../util/format';\n\nfunction* addToCart({\n  id\n}) {\n  const productExists = yield select(state => state.cart.find(p => p.id === id));\n  const stock = yield call(api.get, \"/stock/\".concat(id));\n  const stockAmount = stock.data.amount;\n  const currentAmount = productExists ? productExists.amount + 1 : 0;\n\n  if (currentAmount > stockAmount) {\n    toast.error('Quantidade solicitada fora de estoque!');\n    return;\n  }\n\n  if (productExists) {\n    const amount = productExists.amount + 1;\n    yield put(updateAmountSuccess(id, amount));\n  } else {\n    const response = yield call(api.get, \"/products/\".concat(id));\n\n    const data = _objectSpread({}, response.data, {\n      amount: 1,\n      priceFormatted: formatPrice(response.data.price)\n    });\n\n    yield put(addToCartSuccess(data));\n  }\n}\n\nfunction* updateAmount({\n  id,\n  amount\n}) {\n  if (amount <= 0) return;\n  const stock = yield call(api.get, \"/stock/\".concat(id));\n  const stockAmount = stock.data.amount;\n\n  if (amount > stockAmount) {\n    toast.error('Quantidade solicitada fora de estoque!');\n    return;\n  } else {\n    yield put(updateAmountSuccess(id, amount));\n  }\n}\n\nexport default all([takeLatest('ADD_TO_CART_REQUEST', addToCart), takeLatest('UPDATE_AMOUNT_REQUEST', updateAmount)]);","map":{"version":3,"sources":["/home/atomic/Bootcamp/MODULO007/rocketshoes/src/store/modules/cart/sagas.js"],"names":["call","put","all","takeLatest","select","api","toast","addToCartSuccess","updateAmountSuccess","formatPrice","addToCart","id","productExists","state","cart","find","p","stock","get","stockAmount","data","amount","currentAmount","error","response","priceFormatted","price","updateAmount"],"mappings":";;;;;;AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,GAApB,EAAyBC,UAAzB,EAAqCC,MAArC,QAAmD,oBAAnD;AACA,OAAOC,GAAP,MAAgB,uBAAhB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,gBAAT,EAA2BC,mBAA3B,QAAsD,WAAtD;AACA,SAASC,WAAT,QAA4B,sBAA5B;;AAEA,UAAUC,SAAV,CAAoB;AAAEC,EAAAA;AAAF,CAApB,EAA4B;AAC1B,QAAMC,aAAa,GAAG,MAAMR,MAAM,CAChCS,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWC,IAAX,CAAgBC,CAAC,IAAIA,CAAC,CAACL,EAAF,KAASA,EAA9B,CADuB,CAAlC;AAIA,QAAMM,KAAK,GAAG,MAAMjB,IAAI,CAACK,GAAG,CAACa,GAAL,mBAAoBP,EAApB,EAAxB;AAEA,QAAMQ,WAAW,GAAGF,KAAK,CAACG,IAAN,CAAWC,MAA/B;AACA,QAAMC,aAAa,GAAGV,aAAa,GAAGA,aAAa,CAACS,MAAd,GAAuB,CAA1B,GAA8B,CAAjE;;AAEA,MAAIC,aAAa,GAAGH,WAApB,EAAiC;AAC/Bb,IAAAA,KAAK,CAACiB,KAAN,CAAY,wCAAZ;AACA;AACD;;AAED,MAAIX,aAAJ,EAAmB;AACjB,UAAMS,MAAM,GAAGT,aAAa,CAACS,MAAd,GAAuB,CAAtC;AAEA,UAAMpB,GAAG,CAACO,mBAAmB,CAACG,EAAD,EAAKU,MAAL,CAApB,CAAT;AACD,GAJD,MAIO;AACL,UAAMG,QAAQ,GAAG,MAAMxB,IAAI,CAACK,GAAG,CAACa,GAAL,sBAAuBP,EAAvB,EAA3B;;AAEA,UAAMS,IAAI,qBACLI,QAAQ,CAACJ,IADJ;AAERC,MAAAA,MAAM,EAAE,CAFA;AAGRI,MAAAA,cAAc,EAAEhB,WAAW,CAACe,QAAQ,CAACJ,IAAT,CAAcM,KAAf;AAHnB,MAAV;;AAKA,UAAMzB,GAAG,CAACM,gBAAgB,CAACa,IAAD,CAAjB,CAAT;AACD;AAEF;;AAED,UAAUO,YAAV,CAAuB;AAAEhB,EAAAA,EAAF;AAAMU,EAAAA;AAAN,CAAvB,EAAuC;AACrC,MAAIA,MAAM,IAAI,CAAd,EAAiB;AAEjB,QAAMJ,KAAK,GAAG,MAAMjB,IAAI,CAACK,GAAG,CAACa,GAAL,mBAAoBP,EAApB,EAAxB;AACA,QAAMQ,WAAW,GAAGF,KAAK,CAACG,IAAN,CAAWC,MAA/B;;AAGA,MAAIA,MAAM,GAAGF,WAAb,EAA0B;AACxBb,IAAAA,KAAK,CAACiB,KAAN,CAAY,wCAAZ;AACA;AACD,GAHD,MAGO;AACL,UAAMtB,GAAG,CAACO,mBAAmB,CAACG,EAAD,EAAKU,MAAL,CAApB,CAAT;AACD;AAEF;;AAED,eAAenB,GAAG,CAAC,CACjBC,UAAU,CAAC,qBAAD,EAAwBO,SAAxB,CADO,EAEjBP,UAAU,CAAC,uBAAD,EAA0BwB,YAA1B,CAFO,CAAD,CAAlB","sourcesContent":["import { call, put, all, takeLatest, select } from 'redux-saga/effects'\nimport api from '../../../services/api'\nimport { toast } from 'react-toastify'\nimport { addToCartSuccess, updateAmountSuccess } from './actions'\nimport { formatPrice } from '../../../util/format'\n\nfunction* addToCart({ id }) {\n  const productExists = yield select(\n    state => state.cart.find(p => p.id === id)\n  );\n\n  const stock = yield call(api.get, `/stock/${id}`);\n\n  const stockAmount = stock.data.amount;\n  const currentAmount = productExists ? productExists.amount + 1 : 0;\n\n  if (currentAmount > stockAmount) {\n    toast.error('Quantidade solicitada fora de estoque!');\n    return;\n  }\n\n  if (productExists) {\n    const amount = productExists.amount + 1;\n\n    yield put(updateAmountSuccess(id, amount));\n  } else {\n    const response = yield call(api.get, `/products/${id}`);\n\n    const data = {\n      ...response.data,\n      amount: 1,\n      priceFormatted: formatPrice(response.data.price)\n    }\n    yield put(addToCartSuccess(data));\n  }\n\n}\n\nfunction* updateAmount({ id, amount }) {\n  if (amount <= 0) return;\n\n  const stock = yield call(api.get, `/stock/${id}`);\n  const stockAmount = stock.data.amount;\n\n\n  if (amount > stockAmount) {\n    toast.error('Quantidade solicitada fora de estoque!');\n    return;\n  } else {\n    yield put(updateAmountSuccess(id, amount));\n  }\n\n}\n\nexport default all([\n  takeLatest('ADD_TO_CART_REQUEST', addToCart),\n  takeLatest('UPDATE_AMOUNT_REQUEST', updateAmount),\n]);"]},"metadata":{},"sourceType":"module"}