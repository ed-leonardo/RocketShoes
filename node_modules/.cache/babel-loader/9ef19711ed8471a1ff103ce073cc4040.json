{"ast":null,"code":"import _defineProperty from \"/home/atomic/Bootcamp/MODULO007/rocketshoes/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { call, put, all, takeLatest, select } from 'redux-saga/effects';\nimport api from '../../../services/api';\nimport { toast } from 'react-toastify';\nimport { addToCartSuccess, updateAmountSuccess } from './actions';\nimport { formatPrice } from '../../../util/format';\n\nfunction* addToCart({\n  id\n}) {\n  const productExists = yield select(state => state.cart.find(p => p.id === id)); // const stock = yield call(api.get, `/stock/${id}`);\n  // const stockAmount = stock.data.amount;\n  // const currentAmount = productExists ? productExists.amount + 1 : 0;\n\n  if (productExists) {\n    const amount = productExists.amount + 1;\n    updateAmount(id, amount);\n  } else {\n    const response = yield call(api.get, \"/products/\".concat(id));\n\n    const data = _objectSpread({}, response.data, {\n      amount: 1,\n      priceFormatted: formatPrice(response.data.price)\n    });\n\n    yield put(addToCartSuccess(data));\n  }\n}\n\nfunction* updateAmount({\n  id,\n  amount\n}) {\n  if (amount <= 0) return;\n  const stock = yield call(api.get, \"/stock/\".concat(id));\n  const stockAmount = stock.data.amount;\n\n  if (amount > stockAmount) {\n    toast.error('Quantidade solicitada fora de estoque!');\n    return;\n  } else {\n    yield put(updateAmountSuccess(id, amount));\n  }\n}\n\nexport default all([takeLatest('ADD_TO_CART_REQUEST', addToCart), takeLatest('UPDATE_AMOUNT_REQUEST', updateAmount)]);","map":{"version":3,"sources":["/home/atomic/Bootcamp/MODULO007/rocketshoes/src/store/modules/cart/sagas.js"],"names":["call","put","all","takeLatest","select","api","toast","addToCartSuccess","updateAmountSuccess","formatPrice","addToCart","id","productExists","state","cart","find","p","amount","updateAmount","response","get","data","priceFormatted","price","stock","stockAmount","error"],"mappings":";;;;;;AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,GAApB,EAAyBC,UAAzB,EAAqCC,MAArC,QAAmD,oBAAnD;AACA,OAAOC,GAAP,MAAgB,uBAAhB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,gBAAT,EAA2BC,mBAA3B,QAAsD,WAAtD;AACA,SAASC,WAAT,QAA4B,sBAA5B;;AAEA,UAAUC,SAAV,CAAoB;AAAEC,EAAAA;AAAF,CAApB,EAA4B;AACxB,QAAMC,aAAa,GAAG,MAAMR,MAAM,CAC9BS,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWC,IAAX,CAAgBC,CAAC,IAAIA,CAAC,CAACL,EAAF,KAASA,EAA9B,CADqB,CAAlC,CADwB,CAKxB;AAEA;AACA;;AAGA,MAAIC,aAAJ,EAAmB;AACf,UAAMK,MAAM,GAAGL,aAAa,CAACK,MAAd,GAAuB,CAAtC;AACAC,IAAAA,YAAY,CAACP,EAAD,EAAKM,MAAL,CAAZ;AACH,GAHD,MAGO;AACH,UAAME,QAAQ,GAAG,MAAMnB,IAAI,CAACK,GAAG,CAACe,GAAL,sBAAuBT,EAAvB,EAA3B;;AAEA,UAAMU,IAAI,qBACHF,QAAQ,CAACE,IADN;AAENJ,MAAAA,MAAM,EAAE,CAFF;AAGNK,MAAAA,cAAc,EAAEb,WAAW,CAACU,QAAQ,CAACE,IAAT,CAAcE,KAAf;AAHrB,MAAV;;AAKA,UAAMtB,GAAG,CAACM,gBAAgB,CAACc,IAAD,CAAjB,CAAT;AACH;AAEJ;;AAED,UAAUH,YAAV,CAAuB;AAAEP,EAAAA,EAAF;AAAMM,EAAAA;AAAN,CAAvB,EAAuC;AACnC,MAAIA,MAAM,IAAI,CAAd,EAAiB;AAEjB,QAAMO,KAAK,GAAG,MAAMxB,IAAI,CAACK,GAAG,CAACe,GAAL,mBAAoBT,EAApB,EAAxB;AACA,QAAMc,WAAW,GAAGD,KAAK,CAACH,IAAN,CAAWJ,MAA/B;;AAGA,MAAIA,MAAM,GAAGQ,WAAb,EAA0B;AACtBnB,IAAAA,KAAK,CAACoB,KAAN,CAAY,wCAAZ;AACA;AACH,GAHD,MAGO;AACH,UAAMzB,GAAG,CAACO,mBAAmB,CAACG,EAAD,EAAKM,MAAL,CAApB,CAAT;AACH;AAEJ;;AAED,eAAef,GAAG,CAAC,CACfC,UAAU,CAAC,qBAAD,EAAwBO,SAAxB,CADK,EAEfP,UAAU,CAAC,uBAAD,EAA0Be,YAA1B,CAFK,CAAD,CAAlB","sourcesContent":["import { call, put, all, takeLatest, select } from 'redux-saga/effects'\nimport api from '../../../services/api'\nimport { toast } from 'react-toastify'\nimport { addToCartSuccess, updateAmountSuccess } from './actions'\nimport { formatPrice } from '../../../util/format'\n\nfunction* addToCart({ id }) {\n    const productExists = yield select(\n        state => state.cart.find(p => p.id === id)\n    );\n\n    // const stock = yield call(api.get, `/stock/${id}`);\n\n    // const stockAmount = stock.data.amount;\n    // const currentAmount = productExists ? productExists.amount + 1 : 0;\n\n\n    if (productExists) {\n        const amount = productExists.amount + 1;\n        updateAmount(id, amount)\n    } else {\n        const response = yield call(api.get, `/products/${id}`);\n\n        const data = {\n            ...response.data,\n            amount: 1,\n            priceFormatted: formatPrice(response.data.price)\n        }\n        yield put(addToCartSuccess(data));\n    }\n\n}\n\nfunction* updateAmount({ id, amount }) {\n    if (amount <= 0) return;\n\n    const stock = yield call(api.get, `/stock/${id}`);\n    const stockAmount = stock.data.amount;\n\n\n    if (amount > stockAmount) {\n        toast.error('Quantidade solicitada fora de estoque!');\n        return;\n    } else {\n        yield put(updateAmountSuccess(id, amount));\n    }\n\n}\n\nexport default all([\n    takeLatest('ADD_TO_CART_REQUEST', addToCart),\n    takeLatest('UPDATE_AMOUNT_REQUEST', updateAmount),\n]);"]},"metadata":{},"sourceType":"module"}